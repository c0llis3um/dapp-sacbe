{"version":3,"sources":["ethereumLogo.png","components/index.js","utils/web3Modal.js","graphql/subgraph.js","App.js","index.js"],"names":["module","exports","Header","styled","header","Button","body","img","a","attrs","target","rel","button","props","hidden","web3Modal","Web3Modal","network","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","logoutOfWeb3Modal","clearCachedProvider","window","location","reload","GET_TRANSFERS","gql","WalletButton","provider","loadWeb3Modal","onClick","App","useQuery","loading","error","data","account","active","useState","setProvider","useCallback","connect","newProvider","Web3Provider","useEffect","cachedProvider","React","transfers","console","log","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"6hHAAAA,EAAOC,QAAU,IAA0B,0C,8xCCEpC,IAAMC,EAASC,IAAOC,OAAV,KAmCNC,GAzBOF,IAAOG,KAAV,KAWIH,IAAOI,IAAV,KAMEJ,IAAOK,EAAEC,MAAM,CACjCC,OAAQ,SACRC,IAAK,uBAFaR,CAAH,KAQKA,IAAOS,OAAV,KAYf,SAAAC,GAAK,OAAIA,EAAMC,QAAU,a,oCCxChBC,EAAY,IAAIC,IAAU,CACrCC,QAAS,UACTC,eAAe,EACfC,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACTC,QAAS,CACPC,SAXU,0BAiBLC,EAAiB,uCAAG,sBAAAjB,EAAA,sEACzBO,EAAUW,sBADe,OAE/BC,OAAOC,SAASC,SAFe,2CAAH,qD,sLCnB9B,IAWeC,EAXOC,YAAH,KCoBnB,SAASC,EAAT,GAAoD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAChC,OACE,kBAAC7B,EAAD,CACE8B,QAAS,WACFF,EAGHR,IAFAS,MAMFD,EAA8B,oBAAnB,kBAsCJG,MAjCf,WAAgB,IAAD,EACqCC,YAASP,GAAnDQ,EADK,EACLA,QAASC,EADJ,EACIA,MAAOC,EADX,EACWA,KADX,KACiBC,QADjB,EAC0BC,OACNC,sBAFpB,mBAENV,EAFM,KAEIW,EAFJ,KAKPV,EAAgBW,sBAAW,sBAAC,4BAAArC,EAAA,sEACNO,EAAU+B,UADJ,OAC1BC,EAD0B,OAEhCH,EAAY,IAAII,IAAaD,IAFG,2CAG/B,IAeH,OAZAE,qBAAU,WACJlC,EAAUmC,gBACZhB,MAED,CAACA,IAEJiB,IAAMF,WAAU,YACTX,IAAYC,GAASC,GAAQA,EAAKY,WACrCC,QAAQC,IAAI,CAAEF,UAAWZ,EAAKY,cAE/B,CAACd,EAASC,EAAOC,IAGlB,6BAEE,kBAACtC,EAAD,KACE,kBAAC8B,EAAD,CAAcC,SAAUA,EAAUC,cAAeA,OCzDnDqB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,qEAGPC,IAASC,OACP,kBAAC,IAAD,CAAgBJ,OAAQA,GACtB,kBAAC,EAAD,OAEFK,SAASC,eAAe,W","file":"static/js/main.9dbb1750.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ethereumLogo.0020ce37.png\";","import styled from \"styled-components\";\n\nexport const Header = styled.header`\n  background-color: #282c34;\n  min-height: 70px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  color: white;\n`;\n\nexport const Body = styled.body`\n  align-items: center;\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  justify-content: center;\n  min-height: calc(100vh - 70px);\n`;\n\nexport const Image = styled.img`\n  height: 40vmin;\n  margin-bottom: 16px;\n  pointer-events: none;\n`;\n\nexport const Link = styled.a.attrs({\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n})`\n  color: #61dafb;\n  margin-top: 10px;\n`;\n\nexport const Button = styled.button`\n  background-color: white;\n  border: none;\n  border-radius: 8px;\n  color: #282c34;\n  cursor: pointer;\n  font-size: 16px;\n  text-align: center;\n  text-decoration: none;\n  margin: 0px 20px;\n  padding: 12px 24px;\n\n  ${props => props.hidden && \"hidden\"}\n  \n  :focus {\n    border: none;\n    outline: none;\n  }\n`;\n","import Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"INVALID_INFURA_KEY\";\n\n// Web3Modal also supports many other wallets.\n// You can see other options at https://github.com/Web3Modal/web3modal\nexport const web3Modal = new Web3Modal({\n  network: \"mainnet\",\n  cacheProvider: true,\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: INFURA_ID,\n      },\n    },\n  },\n});\n\nexport const logoutOfWeb3Modal = async function() {\n  await web3Modal.clearCachedProvider();\n  window.location.reload();\n};\n","import { gql } from \"apollo-boost\";\n\n// See more example queries on https://thegraph.com/explorer/subgraph/paulrberg/create-eth-app\nconst GET_TRANSFERS = gql`\n  {\n    transfers(first: 10) {\n      id\n      from\n      to\n      value\n    }\n  }\n`;\n\nexport default GET_TRANSFERS;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { Web3Provider, getDefaultProvider } from \"@ethersproject/providers\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { Body, Button, Header, Image, Link } from \"./components\";\nimport { web3Modal, logoutOfWeb3Modal } from './utils/web3Modal'\nimport logo from \"./ethereumLogo.png\";\n\nimport { addresses, abis } from \"@project/contracts\";\nimport GET_TRANSFERS from \"./graphql/subgraph\";\n\nasync function readOnChainData() {\n  // Should replace with the end-user wallet, e.g. Metamask\n  const defaultProvider = getDefaultProvider();\n  // Create an instance of an ethers.js Contract\n  // Read more about ethers.js on https://docs.ethers.io/v5/api/contract/contract/\n  const ceaErc20 = new Contract(addresses.ceaErc20, abis.erc20, defaultProvider);\n  // A pre-defined address that owns some CEAERC20 tokens\n  const tokenBalance = await ceaErc20.balanceOf(\"0x3f8CB69d9c0ED01923F11c829BaE4D9a4CB6c82C\");\n  console.log({ tokenBalance: tokenBalance.toString() });\n}\n\nfunction WalletButton({ provider, loadWeb3Modal }) {\n  return (\n    <Button\n      onClick={() => {\n        if (!provider) {\n          loadWeb3Modal();\n        } else {\n          logoutOfWeb3Modal();\n        }\n      }}\n    >\n      {!provider ? \"Connect Wallet\" : \"Disconnect Wallet\"}\n    </Button>\n  );\n}\n\nfunction App() {\n  const { loading, error, data, account, active } = useQuery(GET_TRANSFERS);\n  const [provider, setProvider,] = useState();\n\n  /* Open wallet selection modal. */\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, []);\n\n  /* If user has loaded a wallet before, load it automatically. */\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  React.useEffect(() => {\n    if (!loading && !error && data && data.transfers) {\n      console.log({ transfers: data.transfers });\n    }\n  }, [loading, error, data]);\n\n  return (\n    <div>\n\n      <Header>\n        <WalletButton provider={provider} loadWeb3Modal={loadWeb3Modal} />\n      </Header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// You should replace this url with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}